name: litte

on:
  push:
    branches:
      - main                          # 确保只在 main 分支有改动时，触发编译
    paths:
      - '.github/workflows/litte.yml' # 当推送到 .github/workflows/litte.yml 时触发
      - 'commit/**'                   # 当推送到 commit 目录下的任何文件时触发
  schedule:
    - cron: 0 */4 * * *               # 每4小时触发一次
  repository_dispatch:                # 接收外部事件触发
  workflow_dispatch:                  # 手动触发
    inputs:
      packages:
        description: 'packages'       # 输入参数的描述
        required: false               # 输入参数不是必需的
        default: 'false'              # 输入参数的默认值	

jobs:
  job_litte:
    if: github.event.repository.owner.id == github.event.sender.id || ! github.event.sender.id
    # 仅当仓库拥有者和事件发送者为同一人或事件发送者 ID 不存在时运行
    runs-on: ubuntu-latest            # 使用最新的 Ubuntu 环境

    name: Update litte                # 作业名称
    strategy:
      fail-fast: false                # 矩阵策略：某个作业失败时不立即停止所有作业
      matrix:
        target: [master]              # 矩阵中的目标分支

    steps:
    - name: Checkout
      uses: actions/checkout@main     # 使用 actions/checkout@main 检出代码
      with:
        fetch-depth: 0                # 检出完整的提交历史

    - name: Initialization environment
      run : |
        git config --global user.email "actions@github.com"     # 配置 Git 用户邮箱
        git config --global user.name "action"                  # 配置 Git 用户名
        sudo timedatectl set-timezone "Asia/Shanghai"           # 设置时区为上海

    - name: Clone packages
      run: |
        cd $GITHUB_WORKSPACE                                    # 切换到 GitHub 工作空间目录
        chmod +x .github/diy/${{matrix.target}}.sh              # 为特定脚本赋予执行权限
        git clone -b master https://github.com/kenzok8/litte.git ${{matrix.target}}
        # 克隆 kenzok8/litte 仓库的 master 分支到目标目录
        cd ${{matrix.target}}                                   # 切换到目标目录
        git rm -r --cache * >/dev/null 2>&1 &                   # 移除缓存文件
        rm -rf `find ./* -maxdepth 0 -type d ! -name "commit"` >/dev/null 2>&1
        # 删除除 commit 目录以外的所有目录
        $GITHUB_WORKSPACE/.github/diy/litte.sh                  # 执行自定义脚本 litte.sh
        bash /$GITHUB_WORKSPACE/.github/diy/convert_translation.sh
        # 执行翻译转换脚本
        bash /$GITHUB_WORKSPACE/.github/diy/create_acl_for_luci.sh -a
        # 执行创建 ACL 脚本
        bash /$GITHUB_WORKSPACE/.github/diy/Modify.sh           # 执行修改脚本

    - name: Upload
      env: 
        ACCESS_TOKEN: ${{ secrets.ACCESS_TOKEN }}               # 从 secrets 中获取 ACCESS_TOKEN
      run: |
        cd $GITHUB_WORKSPACE/${{matrix.target}}                 # 切换到目标目录
        if git status --porcelain | grep .; then                # 检查是否有更改
          Emoji=("🌸" "🐌" "🌿" "⛅" "🍂" "💦" "💤" "💭" "🍭" "🎉" "🎁" "🎈" "🐾" "🎨" "💋" "🍓" "🍕" "🍉" "🙈" "🤡" "🍡")
          git add .                                             # 添加所有更改
          git commit -am "${Emoji[$[$RANDOM % ${#Emoji[@]}]]} update $(date +%Y-%m-%d" "%H:%M:%S)"
          # 提交更改，提交信息包含随机表情和当前日期时间
          git push --quiet "https://${{ secrets.ACCESS_TOKEN }}@github.com/kenzok8/litte.git" HEAD:master
          # 推送更改到 kenzok8/litte 仓库的 master 分支
        else
          echo "nothing to commit"                              # 如果没有更改，输出信息
          exit 0                                                # 退出脚本
        fi || exit 0                                            # 处理异常情况

    - name: Delete workflow runs
      uses: Mattraks/delete-workflow-runs@main                  # 使用 Mattraks/delete-workflow-runs@main
      with:
        retain_days: 1                                          # 保留最近一天的记录
        keep_minimum_runs: 1                                    # 最少保留一次运行记录
