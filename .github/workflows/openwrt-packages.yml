name: 更新_Luci插件                                    ## Actions工作流的名称
on:
  repository_dispatch:                                 ## 存储库调度
  workflow_dispatch:                                   ## 工作流程_调度
    inputs:
      ssh:                         ## 做判断时用的ID名称（可更改）  
        description: 'SSH远程'     ## 工作流_菜单提示框的名称
        required: false
        default: 'true'      ## 输入：true=开启 false=关闭
      packages:                                        ## 做判断时用的ID名称（可更改）  
        description: '更新插件'                        ## 工作流_菜单提示框的名称
        required: false
        default: 'false'
        
        
  schedule:                                            ## 定时触发开始编译(时间设置请看定时编译说明)
    - cron: 0 */6 * * *                                ## 每隔6个小时运行一次
    
    
  push:                            ## 修改任意代码（或指定文件） 触发编译
    paths:                         ## 当指定文件“修改变动时” 触发编译
      - '.github/workflows/openwrt-packages.yml'       ## 默认是"openwrt-packages.yml"文件变动时 触发编译
      - 'main.sh'                                      ## 默认是"openwrt-packages.yml"文件变动时 触发编译
      
      
env:
  Run_number: ${{github.run_number}}                   ## 当前运行工作流编号，如#12
  CangKu_URL: 'https://github.com/zzid2/luci-app.git'  ## 定时克隆并上传的仓库（换仓库_需要修改!!!）luci-app.git   luci-120.git
  REPO_BRANCH: main                                    ## 定时克隆并上传的分支（换仓库_需要修改!!!）
  TZ: Asia/Shanghai                                    ## 时区设置为上海
  
  
jobs:
  build-luci-app:                         ## 此脚本的任务名称（可自定义）
    runs-on: ubuntu-latest                ## 使用ubuntu-最新版
    if: github.event.repository.owner.id == github.event.sender.id || ! github.event.sender.id     ## 只有仓库所有者才能使用  “点 Star启动编译”


    name: 更新openwrt-packages            ## 运行工作流的名称 Update openwrt-packages
    strategy:
      fail-fast: false
      matrix:
        target: [main]                    ## 运行main分支
        
    steps:
    
    - name: 准备环境                      ## Checkout 
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: 安装编译环境                  ## Initialization environment
      run : |
        pwd && ls
        
        
        AUTHOR_ID=$(echo $CangKu_URL | awk -F'/' '{print $(NF-1)}')                 ## 仓库作者ID，如：zzid2
        echo "AUTHOR_ID=$AUTHOR_ID" >> $GITHUB_ENV                                  ## 仓库作者ID，写入到变量中
        CangKu_ID=$(echo $CangKu_URL | awk -F'/' '{print $NF}' | sed 's/.git//')    ## 仓库项目ID，如：120
        echo "CangKu_ID=$CangKu_ID" >> $GITHUB_ENV                                  ## 仓库项目ID，写入到变量中
        CangKu=$(echo "${GITHUB_REPOSITORY}" | cut -d'/' -f2)                       ## 当前仓库的名称
        echo "CangKu=${CangKu}" >> $GITHUB_ENV                                      ## 当前仓库的名称 写入到变量中
        echo "date1=$(date "+%Y年%m月%d号-%H点%M分")" >> $GITHUB_ENV               ## = date1 变量时间格式: 2021年01月02号-13点10分
        echo "$(date +%s)" > start_time.txt                                         ## 启动时间 写入到“start_time.txt”文本中（与结尾“end_time.txt”文本对应）
        
        ## 终端添加中文
        sudo apt-get install -y language-pack-zh-hans                                    # 安装中文语言包
        echo "LANG=zh_CN.UTF-8" >> $GITHUB_ENV                                           # 加入中文语言包 的变量，会持续显示中文语言；
        
        
        git config --global user.name "actions-user"                                ## 提交名称
        git config --global user.email "$AUTHOR_ID@users.noreply.github.com"        ## 提交Github仓库的电子邮件地址（默认自己仓库）
        sudo timedatectl set-timezone "$TZ"                                         ## 设置时区为上海
        
        
        
        
        
    - name: SSH链接（到此预计10分钟）     ## SSH connection to Actions
      uses: P3TERX/ssh2actions@v1.0.0
      if: github.event.inputs.ssh == 'true'
      env:
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        
        
        
        
    - name: 上传   ## Upload
      env: 
        ACCESS_TOKEN: ${{ secrets.ACCESS_TOKEN }}          ## 项目仓库中添加：ACCESS_TOKEN 令牌值
      run: |
        pwd && ls
        
        if [ -e $GITHUB_WORKSPACE/LICENSE ]; then          ## 判断！当工作目录内有 LICENSE 文件时，复制到  工作目录/main目录内
          cp $GITHUB_WORKSPACE/LICENSE $GITHUB_WORKSPACE/${{matrix.target}}
        fi
        
        if [ -e $GITHUB_WORKSPACE/README.md ]; then        ## 判断！ 当有 README.md 文件时，复制到main目录内
          cp $GITHUB_WORKSPACE/README.md $GITHUB_WORKSPACE/${{matrix.target}}
        fi
        
        cd $GITHUB_WORKSPACE/${{matrix.target}}            ## 进入到main目录内
        
        if git status --porcelain | grep .; then           ## 判断！ 当插件有更新差异时，提交，
          git add .
          git commit -am "更新时间：$(date '+%Y-%m-%d %H:%M:%S')"     ## 插件后面备注更新时间
          git push --quiet "https://${{ secrets.ACCESS_TOKEN }}@github.com/$AUTHOR_ID/$CangKu_ID.git" HEAD:${{matrix.target}}     ## 上传仓库的地址（新创建的仓库）
        else
          echo "nothing to commit"                         ## 反之提示： “没有什么可提交的”
          exit 0
        fi || exit 0
        
        
        
    - name: 删除工作流程运行      ## Delete workflow runs
      uses: Mattraks/delete-workflow-runs@v2
      with:
        token: ${{ secrets.ACCESS_TOKEN }}
        repository: ${{ github.repository }}
        retain_days: 1
        keep_minimum_runs: 2

        
    - name: 计算总运行时长
      run : |
        # 计算运行时长必要的依赖工具（bc awk）
        
        echo "$(date +%s)" > end_time.txt                   ## 结束时间 写入到“end_time.txt”文本中（与开头“start_time.txt”文本对应）
        ELAPSED_MINUTES=$(awk -v start=$(cat start_time.txt) -v end=$(cat end_time.txt) 'BEGIN { elapsed = end - start; printf "%.2f", elapsed / 60 }')         ## = ELAPSED_MINUTES变量：计算运行时间，并保留两位小数点和保留前面有0
        echo "ELAPSED_MINUTES=$ELAPSED_MINUTES" >> $GITHUB_ENV                                                                                                  ## 总运行时间（分钟）写入变量： ELAPSED_MINUTES    ELAPSED_TIME
        rm -rf {start_time.txt,end_time.txt}
        
        
    - name: 准备编译_pushplus微信通知       ## Github设置里需添微信SCKEY=PUSHPLUS值
      uses: xhnmt/pushplus-action@v1.0.0
      with:
        token: ${{ secrets.SCKEY }}
        title: "更新插件_${{env.CangKu}}_#${{env.Run_number}}"
        content: "
              
              仓库名称：${{env.CangKu}}
              
              
              工作流号：#${{env.Run_number}}
              
              
              启动时间：${{ env.date1 }}
              
              
              运行时间：全程用时 ${{ env.ELAPSED_MINUTES }} 分钟
              
              
              "
              ## 结尾
              
