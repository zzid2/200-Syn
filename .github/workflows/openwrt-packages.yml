
## 创建“20-Syn”仓库--->>此仓库“绑定ACCESS_TOKEN令牌值”--->>添加"工作流执行权限"--->>手动创建“GitHub Actions”工作流--->>上传所有源码。
## 创建“luci-app”仓库--->>上传任意源码文件。
## 首先手动运行一次“20-Syn”工作流。


name: 更新_Luci插件                                    ## Actions工作流的名称
on:
  repository_dispatch:                                 ## 存储库调度
  workflow_dispatch:                                   ## 工作流程_调度
    inputs:
      ssh:                                             ## 做判断时用的ID名称（可更改）  
        description: 'SSH远程'                         ## 工作流_菜单提示框的名称
        required: false
        default: 'true-false'                          ## 输入：true=开启 false=关闭
      packages:                                        ## 做判断时用的ID名称（可更改）  
        description: '更新插件'                        ## 工作流_菜单提示框的名称
        required: false
        default: 'false'
        
        
  schedule:                                            ## 定时触发开始编译(时间设置请看定时编译说明)
    - cron: 0 */6 * * *                                ## 每隔6个小时运行一次
    
    
  push:                                                ## 修改任意代码（或指定文件） 触发编译
    paths:                                             ## 当指定文件“修改变动时” 触发编译
      - '.github/workflows/openwrt-packages.yml'       ## 默认是"openwrt-packages.yml"文件变动时 触发编译
      - 'main.sh'                                      ## 默认是"openwrt-packages.yml"文件变动时 触发编译
      
      
env:                                                   ## 全局变量
  Run_number: ${{github.run_number}}                   ## 当前运行工作流编号，如#12
  CangKu_URL: 'https://github.com/zzid2/luci-200.git'  ## 定时克隆并上传的仓库（换仓库_需要修改!!!）luci-app.git   luci-120.git
  REPO_BRANCH: main                                    ## 主要更新 分支
  REPO_FORMER: former                                  ## 旧版删库 分支
  TZ: Asia/Shanghai                                    ## 时区设置为上海
  
jobs:
  build-luci-app:                                      ## 此脚本的任务名称（可自定义）
    runs-on: ubuntu-latest                             ## 使用ubuntu-最新版
    if: github.event.repository.owner.id == github.event.sender.id || ! github.event.sender.id     ## 只有仓库所有者才能使用  “点 Star启动编译”


    name: 更新openwrt-packages                         ## 运行工作流的名称 Update openwrt-packages
    strategy:
      fail-fast: false
      matrix:
        target: [main]                                 ## 运行main分支
        
    steps:
    
    - name: 准备环境                                   ## Checkout 
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: 安装编译环境                               ## Initialization environment
      run : |
        pwd && ls
        
        AUTHOR_ID=$(echo $CangKu_URL | awk -F'/' '{print $(NF-1)}')                                ## 仓库作者ID，如：zzid2
        echo "AUTHOR_ID=$AUTHOR_ID" >> $GITHUB_ENV                                                 ## 仓库作者ID，写入到变量中
        
        CangKu_ID=$(echo $CangKu_URL | awk -F'/' '{print $NF}' | sed 's/.git//')                   ## 仓库项目ID，如：120
        echo "CangKu_ID=$CangKu_ID" >> $GITHUB_ENV                                                 ## 仓库项目ID，写入到变量中
        
        CangKu=$(echo "${GITHUB_REPOSITORY}" | cut -d'/' -f2)                                      ## 当前仓库的名称
        echo "CangKu=${CangKu}" >> $GITHUB_ENV                                                     ## 当前仓库的名称 写入到变量中
        
        echo "date1=$(date "+%Y年%m月%d号-%H点%M分")" >> $GITHUB_ENV                              ## 时间变量格式: 2021年01月02号-13点10分
        echo "date_BAK=$(date +'%m.%d')" >> $GITHUB_ENV                                            ## 时间变量格式：08.01
        echo "$(date +%s)" > start_time.txt                                                        ## 启动时间 写入到“start_time.txt”文本中（与结尾“end_time.txt”文本对应）
        
        git config --global user.name "actions-user"                                               ## 提交名称
        git config --global user.email "$AUTHOR_ID@users.noreply.github.com"                       ## 提交Github仓库的电子邮件地址（默认自己仓库）
        sudo timedatectl set-timezone "$TZ"                                                        ## 设置时区为上海
        
        ## 终端添加中文
        sudo apt-get install -y language-pack-zh-hans                                              ## 安装中文语言包
        echo "LANG=zh_CN.UTF-8" >> $GITHUB_ENV                                                     ## 加入中文语言包 的变量，会持续显示中文语言；
        
        
        
    - name: SSH链接（到此预计10分钟）                  ## SSH connection to Actions
      uses: P3TERX/ssh2actions@v1.0.0
      if: github.event.inputs.ssh == 'true'
      env:
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
        
        
        
    - name: 下载 former 分支                           ## Clone packages
      run: |
        # pwd && ls
        
        git clone -b $REPO_FORMER $CangKu_URL $REPO_FORMER || {                                    ## 克隆 former 分支，如果克隆远程仓库失败，本地创建新仓库。
            echo "克隆远程仓库失败，本地创建新仓库！！！";
            mkdir $REPO_FORMER;                                                                    ## 创建 former目录
            cd $REPO_FORMER;                                                                       ## cd 进入目录
            git init;                                                                              ## 初始化新仓库
            git branch -M $REPO_FORMER;                                                            ## 重命名默认分支为 "former"
            cd ..;                                                                                 ## 返回上级目录
        }
        
        cd $REPO_FORMER
        
        rm -rf {LICENSE,README,README.md,README_en.md}
        rm -rf ./*/{LICENSE,README,README.md,README_en.md}
        rm -rf ./*/*/{LICENSE,README,README.md,README_en.md}
        
        git rm -r --cache * >/dev/null 2>&1 &                                                      ## 删除 Git索引（缓存区）中所有文件和目录，但保留源码文件；
        
        echo "这是一个存放删库的目录" > former.txt
        
        
        
    - name: 下载 main 分支                             ## Clone packages
      run: |
        # pwd && ls
        
        git clone -b $REPO_BRANCH $CangKu_URL ${{matrix.target}} || {                              ## 克隆 main 分支，如果克隆远程仓库失败，本地创建新仓库。
            echo "克隆远程仓库失败，本地创建新仓库！！！";
            mkdir ${{matrix.target}};
            cd ${{matrix.target}};
            git init;
            git branch -M $REPO_BRANCH;
            cd ..;
        }
        
        
        
        ## 比较main和former目录，在重复的former子目录后追加后缀；
        for item in ${{matrix.target}}/*; do                                                                          ## 遍历 main 目录内所有文件目录，
            if [[ "$(basename "$item")" != ".git" && -e "$REPO_FORMER/$(basename "$item")" ]]; then                   ## 判断 former 目录内（排除.git目录） 是否有与main目录内重复的（子目录），
                mv "$REPO_FORMER/$(basename "$item")" "$REPO_FORMER/$(basename "$item")_bak_${{ env.date_BAK }}"      ## 重命名 former 目录内重复的子目录，追加后缀名；
                echo "重命名重复项: $REPO_FORMER/$(basename "$item") 为 $REPO_FORMER/$(basename "$item")_bak_${{ env.date_BAK }}"
            fi
        done
        
        
        
        rsync -av --exclude='.git' ${{matrix.target}}/ $REPO_FORMER/                               ## main目录同步到former目录，并排除 .git目录
        
        
        chmod +x build/${{matrix.target}}.sh                                                       ## build目录内的main.sh脚本  增加可执行的权限
        cd ${{matrix.target}}                                                                      ## cd 进入 main 目录
        
        
        rm -rf {LICENSE,README,README.md,README_en.md}
        rm -rf ./*/{LICENSE,README,README.md,README_en.md}
        rm -rf ./*/*/{LICENSE,README,README.md,README_en.md}                                       ## 删除无用说明
        
        git rm -r --cache * >/dev/null 2>&1 &                                                      ## 删除 Git索引（缓存区）中所有文件和目录，但保留源码文件；
        
        rm -rf `find ./* -maxdepth 0 -type d ! -name "build"` >/dev/null 2>&1                      ## 删除 当前目录内所有文件，但排除"build"目录；
        
        
        
        ## 第二次单独下载最新版插件
        bash /$GITHUB_WORKSPACE/build/${{matrix.target}}.sh                                        ## 执行main.sh       重新克隆一遍 最新版的插件！！！
        bash /$GITHUB_WORKSPACE/build/convert_translation.sh                                       ## 执行convert_translation.sh  全部改成zh-cn中文
        bash /$GITHUB_WORKSPACE/build/create_acl_for_luci.sh -a                                    ## 执行create_acl_for_luci.sh  输入报错提示
        bash /$GITHUB_WORKSPACE/build/Modify.sh                                                    ## 执行Modify.sh    删除插件包内（.git .svn 等多余的文件）
        
        
        rm -rf {LICENSE,README,README.md,README_en.md}
        rm -rf ./*/{LICENSE,README,README.md,README_en.md}
        rm -rf ./*/*/{LICENSE,README,README.md,README_en.md}                                       ## 删除无用说明
        
        
        
    - name: 删除重复子目录
      run: |
        
        for item in ${{matrix.target}}/*; do                                                                           ## 遍历 main 目录内所有文件目录，
            if [[ "$(basename "$item")" != ".git" && -e "$REPO_FORMER/$(basename "$item")" ]]; then                    ## 判断 former 目录内（排除.git目录） 是否有与main目录内重复的（子目录），
            rm -rf "$REPO_FORMER/$(basename "$item")"                                                                  ## 删除 former 目录内重复的子目录；
            echo "删除重复项: $REPO_FORMER/$(basename "$item")"
            fi
        done
        
        zip -r $REPO_FORMER_${{ env.date }}.zip $REPO_FORMER                                       ## 压缩 former 目录，用于发布主页
        zip -r ${{matrix.target}}_${{ env.date }}.zip ${{matrix.target}}                           ## 压缩 main   目录，用于发布主页
        
    - name: 上传全部源码                                                                           ## Upload bin directory
      uses: actions/upload-artifact@v4                                                             ## https://github.com/actions/upload-artifact
      with:
        name: former_${{ env.date_BAK }}               ## 文件名称
        path: ${{ github.workspace }}
        
      

        
    - name: 推送 main 分支                             ## Upload
      env: 
        ACCESS_TOKEN: ${{ secrets.ACCESS_TOKEN }}                                                  ## 项目仓库中添加：ACCESS_TOKEN 令牌值
      run: |
        pwd && ls
        
        if [ -e $GITHUB_WORKSPACE/LICENSE ]; then                                                  ## 判断！当工作目录内有 LICENSE 文件时，复制到  工作目录/main目录内
          cp $GITHUB_WORKSPACE/LICENSE $GITHUB_WORKSPACE/${{matrix.target}}
        fi
        
        if [ -e $GITHUB_WORKSPACE/README.md ]; then                                                ## 判断！ 当有 README.md 文件时，复制到main目录内
          cp $GITHUB_WORKSPACE/README.md $GITHUB_WORKSPACE/${{matrix.target}}
        fi
        
        
        cd $GITHUB_WORKSPACE/${{matrix.target}}                                                    ## 进入到main目录内
        if git status --porcelain | grep .; then                                                   ## 判断！ 当插件有更新差异时，提交，
          git add .
          git commit -am "更新时间：$(date '+%Y-%m-%d %H:%M:%S')"                                 ## 插件后面备注更新时间
          git push --quiet "https://${{ secrets.ACCESS_TOKEN }}@github.com/$AUTHOR_ID/$CangKu_ID.git" HEAD:${{matrix.target}}             ## 上传仓库的地址（新创建的仓库）
        else
          echo "nothing to commit"                                                                 ## 反之提示： “没有什么可提交的”
          exit 0
        fi || exit 0
        
        
        
    - name: 推送 former 分支                           ## Upload
      env: 
        ACCESS_TOKEN: ${{ secrets.ACCESS_TOKEN }}                                                  ## 项目仓库中添加：ACCESS_TOKEN 令牌值
      run: |
        
        cd $GITHUB_WORKSPACE/$REPO_FORMER                                                          ## 进入到main目录内
        if git status --porcelain | grep .; then                                                   ## 判断！ 当插件有更新差异时，提交，
          git add .
          git commit -am "更新时间：$(date '+%Y-%m-%d %H:%M:%S')"                                  ## 插件后面备注更新时间
          git push --quiet "https://${{ secrets.ACCESS_TOKEN }}@github.com/$AUTHOR_ID/$CangKu_ID.git" HEAD:$REPO_FORMER                   ## 上传仓库的地址（新创建的仓库）
        else
          echo "nothing to commit"                                                                 ## 反之提示： “没有什么可提交的”
          exit 0
        fi || exit 0
        
        
        
    - name: 创建Git标签
      env:
        GITHUB_TOKEN: ${{ secrets.ACCESS_TOKEN }}
      run: |
        
        git tag -a v${{ env.date }} -m "Release for ${{ env.date }}"                                  ## 创建标签
        git remote set-url origin https://github-actions:${{ secrets.ACCESS_TOKEN }}@github.com/${{ github.repository }}   ## 设置远程仓库 URL
        git push origin v${{ env.date }}                                                              ## 推送标签
        

    - name: 发布固件                         ## 自动发布固件 releases主页下载
      uses: softprops/action-gh-release@v2   ## https://github.com/softprops/action-gh-release
      # if: steps.organizer.outputs.status == 'success' && env.UPLOAD_RELEASE == 'true' && !cancelled()
      env:
        GITHUB_TOKEN: ${{ secrets.ACCESS_TOKEN }}
      with:
        name: ${{ env.date1 }} 「 ${{env.REPO_FORMER}} 」分支#${{env.Run_number}}        ## 最大字号的标题
        tag_name: ${{ env.date }}            ## 左侧标签页时间
        body: |                              ## 文本显示
            ☆  源码 : ${{ env.REPO_URL }}
            ☆  分支 : ${{ env.REPO_BRANCH }}
            ☆  感谢源码作者[ ${{ env.ZUOZHE }}大神 ]无私分享！
            
            🎉 [ ${{matrix.target}} ]固件下载 ✨
            -
            💐 奶牛快传(国内高速🚀下载)： ${{ env.COWTRANSFER_URL }}
            
            ⛄ WeTransfer(国外高速🚀下载)： ${{ env.WETRANSFER_URL }}
            
            🌴 链接有效期为7天，无需注册直接下载 🐤
        files: ${{matrix.target}}_${{ env.date }}.zip         ## 上传生成的所有固件
        
        
        
    - name: 删除工作流程运行      ## Delete workflow runs
      uses: Mattraks/delete-workflow-runs@v2
      with:
        token: ${{ secrets.ACCESS_TOKEN }}
        repository: ${{ github.repository }}
        retain_days: 1
        keep_minimum_runs: 2

        
    - name: 计算总运行时长
      run : |
        # 计算运行时长必要的依赖工具（bc awk）
        
        echo "$(date +%s)" > end_time.txt                                                           ## 结束时间 写入到“end_time.txt”文本中（与开头“start_time.txt”文本对应）
        ELAPSED_MINUTES=$(awk -v start=$(cat start_time.txt) -v end=$(cat end_time.txt) 'BEGIN { elapsed = end - start; printf "%.2f", elapsed / 60 }')         ## = ELAPSED_MINUTES变量：计算运行时间，并保留两位小数点和保留前面有0
        echo "ELAPSED_MINUTES=$ELAPSED_MINUTES" >> $GITHUB_ENV                                                                                                  ## 总运行时间（分钟）写入变量： ELAPSED_MINUTES    ELAPSED_TIME
        rm -rf {start_time.txt,end_time.txt}
        
        
    - name: 结束_pushplus微信通知       ## Github设置里需添微信SCKEY=PUSHPLUS值
      uses: xhnmt/pushplus-action@v1.0.0
      with:
        token: ${{ secrets.SCKEY }}
        title: "更新插件_${{env.CangKu}}_#${{env.Run_number}}"
        content: "
              
              仓库名称：${{env.CangKu}}
              
              
              工作流号：#${{env.Run_number}}
              
              
              启动时间：${{ env.date1 }}
              
              
              运行时间：全程用时 ${{ env.ELAPSED_MINUTES }} 分钟
              
              
              "
              ## 结尾
              
              